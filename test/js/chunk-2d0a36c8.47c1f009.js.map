{"version":3,"sources":["webpack:///./src/additional/ColorGenerator.js","webpack:///./src/store/Main/tag.js"],"names":["selectedColor","letters","colorGenerator","color","i","Math","floor","random","namespaced","moduleName","state","tags","tagsIsReady","getters","tagsPack","tagsIds","filteredTags","forEach","tagId","push","mutations","setTags","tagsMap","tag","id","name","tagsIsLoaded","setTagsIsReady","actions","loadTags","commit","$requests","success","data","result","length"],"mappings":"qLAAMA,EAAgB,GAChBC,EAAU,mBAEVC,EAAiB,SAAjBA,IAEJ,IADA,IAAIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1BD,GAASF,EAAQI,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAIJ,KAASH,GACXG,EAAQD,EAKHC,IAHLH,EAAcG,GAASA,EAChBA,IAKID,ICdA,cACbM,YAAY,EACZC,WAAY,MACZC,MAAO,CACLC,KAAM,GACNC,aAAa,GAEfC,QAAS,CACPF,KAAM,SAACD,GAAD,OAAWA,EAAMC,MACvBG,SAAU,SAACJ,GAAD,OAAW,SAACK,GACpB,IAAMC,EAAe,GAErB,OADAD,EAAQE,SAAQ,SAAAC,GAAK,OAAIR,EAAMC,KAAKO,IAAUF,EAAaG,KAAKT,EAAMC,KAAKO,OACpEF,KAGXI,UAAW,CACTC,QAAS,SAACX,EAAOC,GACf,IAAMW,EAAU,GAChBX,EAAKM,SAAQ,SAAAM,GACXD,EAAQC,EAAIC,IAAM,CAChBC,KAAMF,EAAIE,KACVtB,MAAOD,IACPsB,GAAID,EAAIC,OAGZd,EAAMC,KAAOW,EACbZ,EAAMgB,cAAe,GAEvBC,eAAgB,SAACjB,GACfA,EAAME,aAAc,IAGxBgB,QAAS,CACPC,SAAU,WAAF,8CAAE,8GAASC,EAAT,EAASA,OAAQpB,EAAjB,EAAiBA,OACrBA,EAAME,YADF,iEAEWmB,OAAUpB,OAFrB,OAEFA,EAFE,OAGJA,EAAKqB,SAAL,UAAgBrB,EAAKsB,KAAKC,cAA1B,OAAgB,EAAkBC,QACpCL,EAAO,UAAWnB,EAAKsB,KAAKC,QAE9BJ,EAAO,kBANC,2CAAF,sDAAE","file":"js/chunk-2d0a36c8.47c1f009.js","sourcesContent":["const selectedColor = {};\nconst letters = '0123456789ABCDEF';\n\nconst colorGenerator = () => {\n  let color = '#';\n  for (let i = 0; i < 6; i += 1) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  if (color in selectedColor) {\n    color = colorGenerator;\n  } else {\n    selectedColor[color] = color;\n    return color;\n  }\n  return color;\n};\n\nexport default colorGenerator;\n","import $requests from '../../requests';\nimport colorGenerator from '../../additional/ColorGenerator';\n\nexport default {\n  namespaced: true,\n  moduleName: 'tag',\n  state: {\n    tags: {},\n    tagsIsReady: false,\n  },\n  getters: {\n    tags: (state) => state.tags,\n    tagsPack: (state) => (tagsIds) => {\n      const filteredTags = [];\n      tagsIds.forEach(tagId => state.tags[tagId] && filteredTags.push(state.tags[tagId]));\n      return filteredTags;\n    },\n  },\n  mutations: {\n    setTags: (state, tags) => {\n      const tagsMap = {};\n      tags.forEach(tag => {\n        tagsMap[tag.id] = {\n          name: tag.name,\n          color: colorGenerator(),\n          id: tag.id,\n        };\n      });\n      state.tags = tagsMap;\n      state.tagsIsLoaded = true;\n    },\n    setTagsIsReady: (state) => {\n      state.tagsIsReady = true;\n    },\n  },\n  actions: {\n    loadTags: async ({ commit, state }) => {\n      if (state.tagsIsReady) return;\n      const tags = await $requests.tags();\n      if (tags.success && tags.data.result?.length) {\n        commit('setTags', tags.data.result);\n      }\n      commit('setTagsIsReady');\n    },\n  },\n};\n"],"sourceRoot":""}