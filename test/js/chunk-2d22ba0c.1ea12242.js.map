{"version":3,"sources":["webpack:///./src/store/Main/event.js"],"names":["getDateByStrTime","date","timeStr","timesPaths","split","moment","set","hours","minutes","seconds","namespaced","moduleName","state","events","getters","eventsMapByDates","sourceEvents","JSON","parse","stringify","eventKey","event","yearMonthKey","yearMonth","day","data","age","days","dayData","_startDate","startTime","_endDate","endTime","_visibleStartTime","format","_visibleEndTime","_timeRange","push","mutations","setEvents","month","year","forEach","eventDates","dateTimes","eventDate","Vue","id","clearEvents","clearEventsByYearMonth","Object","keys","eventId","delete","actions","loadEventsByYearMonth","commit","rootGetters","$requests","success","result","length"],"mappings":"0QAIMA,EAAmB,SAACC,EAAMC,GAC9B,IAAMC,EAAaD,EAAQE,MAAM,KACjC,OAAOC,IAAOJ,GAAMK,IAAI,CACtBC,MAAOJ,EAAW,GAClBK,QAASL,EAAW,GACpBM,QAASN,EAAW,MAIT,cACbO,YAAY,EACZC,WAAY,QACZC,MAAO,CACLC,OAAQ,IAEVC,QAAS,CACPC,iBAAkB,SAACH,GACjB,IAAMG,EAAmB,GACnBC,EAAeC,KAAKC,MAAMD,KAAKE,UAAUP,EAAMC,SACrD,IAAK,IAAMO,KAAYJ,EAAc,CACnC,IAAMK,EAAQL,EAAaI,GAC3B,IAAK,IAAME,KAAgBD,EAAO,CAChC,IAAME,EAAYF,EAAMC,GAExB,IAAK,IAAME,KADXD,EAAUE,KAAKC,IAAf,UAAwBH,EAAUE,KAAKC,IAAvC,KACkBH,EAAUI,KAAM,CAChC,IAAMC,EAAUL,EAAUI,KAAKH,GACzBA,KAAOT,IACXA,EAAiBS,GAAO,IAE1BI,EAAQC,WAAa7B,EAAiBwB,EAAKI,EAAQE,WACnDF,EAAQG,SAAW/B,EAAiBwB,EAAKI,EAAQI,SACjDJ,EAAQK,kBAAoBL,EAAQC,WAAWK,OAAO,MACtDN,EAAQO,gBAAkBP,EAAQG,SAASG,OAAO,MAClDN,EAAQQ,WAAR,UAAwBR,EAAQK,kBAAhC,cAAuDL,EAAQO,iBAC/DpB,EAAiBS,GAAKa,KAAtB,iCAAgCd,EAAUE,MAASG,MAIzD,OAAOb,IAGXuB,UAAW,CACTC,UAAW,SAAC3B,EAAD,GAAoC,IAA1BC,EAA0B,EAA1BA,OAAQ2B,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClC5B,EAAO6B,SAAQ,SAAArB,GACb,IAAMsB,EAAa,GACnBtB,EAAMuB,UAAUF,SAAQ,SAAAzC,GACtB0C,EAAW1C,EAAK4C,WAAa5C,KAE/B6C,OAAIxC,IAAIM,EAAMC,OAAQQ,EAAM0B,GAA5B,4BACMN,EADN,YACcD,GAAU,CACpBf,KAAMJ,EACNM,KAAM,kBAAKgB,UAKnBK,YAAa,SAACpC,GAAD,OAAWA,EAAMC,OAAS,IACvCoC,uBAAwB,SAACrC,EAAD,GAA4B,IAAlB6B,EAAkB,EAAlBA,KAAMD,EAAY,EAAZA,MACtCU,OAAOC,KAAKvC,EAAMC,QAAQ6B,SAAQ,SAAAU,GAChC,IAAM/B,EAAQT,EAAMC,OAAOuC,GAC3BN,OAAIO,OAAOhC,EAAX,UAAqBoB,EAArB,YAA6BD,SAInCc,QAAS,CACPC,sBAAuB,WAAF,8CAAE,wHAASC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,YAAiBhB,EAAlC,EAAkCA,KAAMD,EAAxC,EAAwCA,MAAxC,SACAkB,OAAU7C,OAAO4C,EAAY,gCAAgCV,GAAIN,EAAMD,GADvE,OACf3B,EADe,OAEjBA,EAAO8C,SAAP,UAAkB9C,EAAOY,KAAKmC,cAA9B,OAAkB,EAAoBC,SACxCL,EAAO,yBAA0B,CAAEf,OAAMD,UACzCgB,EAAO,YAAa,CAAEf,OAAMD,QAAO3B,OAAQA,EAAOY,KAAKmC,UAJpC,2CAAF,wDAAE","file":"js/chunk-2d22ba0c.1ea12242.js","sourcesContent":["import { Vue } from 'vue-property-decorator';\nimport moment from 'moment';\nimport $requests from '../../requests';\n\nconst getDateByStrTime = (date, timeStr) => {\n  const timesPaths = timeStr.split(':');\n  return moment(date).set({\n    hours: timesPaths[0],\n    minutes: timesPaths[1],\n    seconds: timesPaths[2],\n  });\n};\n\nexport default {\n  namespaced: true,\n  moduleName: 'event',\n  state: {\n    events: {},\n  },\n  getters: {\n    eventsMapByDates: (state) => {\n      const eventsMapByDates = {};\n      const sourceEvents = JSON.parse(JSON.stringify(state.events));\n      for (const eventKey in sourceEvents) {\n        const event = sourceEvents[eventKey];\n        for (const yearMonthKey in event) {\n          const yearMonth = event[yearMonthKey];\n          yearMonth.data.age = `${yearMonth.data.age}+`;\n          for (const day in yearMonth.days) {\n            const dayData = yearMonth.days[day];\n            if (!(day in eventsMapByDates)) {\n              eventsMapByDates[day] = [];\n            }\n            dayData._startDate = getDateByStrTime(day, dayData.startTime);\n            dayData._endDate = getDateByStrTime(day, dayData.endTime);\n            dayData._visibleStartTime = dayData._startDate.format('LT');\n            dayData._visibleEndTime = dayData._endDate.format('LT');\n            dayData._timeRange = `${dayData._visibleStartTime} - ${dayData._visibleEndTime}`;\n            eventsMapByDates[day].push({ ...yearMonth.data, ...dayData });\n          }\n        }\n      }\n      return eventsMapByDates;\n    },\n  },\n  mutations: {\n    setEvents: (state, { events, month, year }) => {\n      events.forEach(event => {\n        const eventDates = {};\n        event.dateTimes.forEach(date => {\n          eventDates[date.eventDate] = date;\n        });\n        Vue.set(state.events, event.id, {\n          [`${year}.${month}`]: {\n            data: event,\n            days: { ...eventDates },\n          },\n        });\n      });\n    },\n    clearEvents: (state) => state.events = {},\n    clearEventsByYearMonth: (state, { year, month }) => {\n      Object.keys(state.events).forEach(eventId => {\n        const event = state.events[eventId];\n        Vue.delete(event, `${year}.${month}`);\n      });\n    },\n  },\n  actions: {\n    loadEventsByYearMonth: async ({ commit, rootGetters }, { year, month }) => {\n      const events = await $requests.events(rootGetters['main-module/city/currentCity'].id, year, month);\n      if (events.success && events.data.result?.length) {\n        commit('clearEventsByYearMonth', { year, month });\n        commit('setEvents', { year, month, events: events.data.result });\n      }\n    },\n  },\n};\n"],"sourceRoot":""}